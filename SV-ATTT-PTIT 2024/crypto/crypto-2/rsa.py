from Cryptodome.Util.number import inverse, long_to_bytes, bytes_to_long
import math

# Given values from the problem
e = 65537

# Encrypted messages and moduli
encrypted_message = 4801864772968513061393585637608978114538931040387019351143012387840260945134873131445315765401598636521743668050151374845127882699177749530458917497267565658306660721474003556667731039031366534528037920988597299230402349380614683773384593916876003092919187672461011382642453119169410144091274735024203183795964576016636680214461005672933755107361193847425541005537824507413903195662802737442994992862537283142929570797123835327934657418486694713979153281541793293866656021572309398437245424711480288805388702891303050358330905717655785941828743266807811465515319396178006870751691594996081849884962394436986105801543
encrypted_flag = 607972801901884011593939458649184813135412548307217652561062278253099325944434756665283261285005913388599902833867480710422342527675521324800061856423275889121752996733637787043524490909552353507811073208673362747349586026878792393892744926346976973334437004418734684932240084384308610077911544317327011539770018420059014867890610628475121572660445385209849417389029045660359235978447421376526014088880234641700085571532148344367112921406658142704474797750726853907707713752012245813715113233424429717841942760463313295903025908387755111642525063829837515294084754559749182741855744974042886993680828947900659667200
n1 = 13186607280514821532722977544637005504371963946305565889189718469711663618147385107931422808605160708187066666419645997875250952833295259848541272037017974850082490972257807951981064358446258955350842763736198599304747094365641117684012258751106798560801318108185839348475732717681045319267807067477072464877656110635436734291285747289142558308090118848458533007367066439421548314766480675811813193029292134442051565909341789813371485487445637172186886258194328171170308858956295256627516480269231250331778363190420800220375165127029100280409121540348717398254362439737784091275184908040964661745647531079683819874451
n2 = 14493672909810598147239385633383416532835293513673753202456842825019056390190426178861220883057356801772401456986895242621312284901494123579525440551731895632378671918047240206447683122144962194277407654529484517041716687050962382223400370324479745538100758243239574608623626028490521984278684350994096404431750177927515445527772616073215542984243431575762455339004085654365452503807201220221371702865860067842864631402120162634205150856421456096908816309488042171447048430650202784529435295331555133051123701651841990449477573623769249369555474286879409542790118495338659969785004420203029221089721760943149069201129

# Step 1: Compute the GCD of the two moduli to find p
p = math.gcd(n1, n2)
print(f"Found prime p: {p}")

# Step 2: Find q and r
q = n1 // p
r = n2 // p

# Print the values of q and r
print(f"Found prime q: {q}")
print(f"Found prime r: {r}")

# Step 3: Compute phi for n1 (p*q)
phi1 = (p - 1) * (q - 1)

# Compute private key d for n1
d1 = inverse(e, phi1)

# Step 4: Decrypt the message
message = pow(encrypted_message, d1, n1)
print(f"Decrypted message: {long_to_bytes(message).decode()}")

# Step 5: Compute phi for n2 (p*r)
phi2 = (p - 1) * (r - 1)

# Compute private key d for n2
d2 = inverse(e, phi2)

# Step 6: Decrypt the flag
flag = pow(encrypted_flag, d2, n2)
print(f"Decrypted flag: {long_to_bytes(flag).decode()}")
